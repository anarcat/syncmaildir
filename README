SYNC MAIL DIR
=============

Sync Mail Dir (`smd`) is a set of tools to synchronize a pair of mailboxes
in Maildir format. It is Free Software, released under the terms of GPLv3.

It differs from other solutions in terms of performances and lower installation 
requirements. The widespread solution IMAP-server plus 
[OfflineIMAP](http://software.complete.org/software/projects/show/offlineimap) 
requires an IMAP server to be installed. Alternatively 
[Maildirsync](http://hacks.dlux.hu/maildirsync/) requires no IMAP server, just ssh,
but it used to load my laptop CPU too much and it seems its development stopped in 2004.
Other general purpose tools like rsync or
unison may work too, but will not benefit from the fact that they are synchronizing
mail messages. Sync Mail Dir is similar to Maildirsync in its design and requirements,
but is more efficient, having its mechanisms written in C (around 700 lines), while
policies are written in scripting languages (other 700 lines).

Sync Mail Dir uses `ssh` to transmit and receive data, and to
run commands on the remote host (but in principle it could use any 
bi-directional channel, like `nc` for example).

Sync Mail Dir needs to be installed on both hosts: we call server the host we
push to and pull from, we call client the host we push from and pull to. In the
most common scenario, the server is our mail server, while the client is our
laptop.

The directory `~/.smd/` contains the configuration file, some `fifo` needed to
short-circuit the softwares running on the client and on the server, and a
cache file (called db-file from now on) that represents the status of the
mailbox las time we successfully pushed. The configuration file is needed only
on the client host (the one that will run `smd-pull` and `smd-push`).

Sync Mail Dir is a layered set of tools, where low level tools are implemented
in low level languages (to achieve decent performances) and high level tools
are written in scripting languages (to achieve better flexibility). 

- `mddiff` is a small and hopefully efficient C program that given a 
  db-file (a snapshot of a previous mailbox status) generates a set of 
  actions (a diff) a client should perform to synchronize its local
  mailbox copy. It is a low level tool, not meant to be used directly by the user.
- `smd-server` a simple script that calls `mddiff` to compute the diff,
  sends it to the client and then listen for client requests like getting
  a mail body or header. Even if this tool is simple to run, redirecting its 
  input and output to `smd-client` over a network may not be straightforward, thus
  users should not call it directly.
- `smd-client` a quite complex script applying a diff locally, eventually requesting data
  to the server. In case the diff cannot be appllied cleanly, it outputs an error message
  that higher level tools should display to the user. As `smd-server` it is a quite
  high level tool, but should not be called directly by the average user.
- `smd-pull` thanks to ssh, it executes `smd-server` on the server host and `smd-client`
  on the client host. This allows to pull remote changes and apply them locally.
  The remote mailbox is left untouched. This tool is meant to be called by the user.
- `smd-push` thanks to ssh, it executes `smd-client` on the server host and `smd-serer`
  on the client host. This allows to push local changes to apply them on the remote host.
  The local mailbox is left untouched. This tool is meant to be called by the user.

HOW-TO
------

Till now, two end-user tools are available (more will be added in the future, possibly
equipped with an eye-candy notification icon for modern desktops):

- `smd-pull` to obtain the changes made on the remote mailbox applied locally
- `smd-push` viceversa

Both tools read a configuration file in `~/.smd/config`, that is a simple
shell script sourced by both. This file defines the following variables:

- `SERVERNAME` is a valid alias for ssh. It should be defined in 
  your `~/.ssh/config`, with compression enabled. For example:

    Host smd-server-foo
      Compression yes
      Hostname your.real.server.name
      Username you

- `CLIENTNAME` a name for your client: the host name should be fine.

- `MAILBOX` a list of roots to be synchronized. There is no support for
  name mapping, thus they should be named the same on the remote host.

- `DEBUG` can be set to true to log the traffic between client and server

The first time you run `smd-pull` or `smd-push` a template file will be 
generated for you. 

Notes on performances
---------------------

On my core duo 2 laptop equipped with a 5400rpm hard drive, copying a 150MB mailbox 
with `tar cf - Mail | ssh -C localhost tar xf -` takes 17 seconds. Doing the same with
`smd-pull` takes 19 seconds. This is clearly an uncommon workload, since you rarely 
get 150MB of new mails, but it shows the extra work the tool is doing (like calculating
`sha1` sums for every mail, or the client-server protocol overhead) makes `smd` not so 
inefficient. Once the mailbox has been copied, running `smd-pull` again to check for
updates is almost instantaneous.

...to be finished for version 1.0

smd-pull and smd-push
---------------------

The idea is quite simple. If `===` is a double pipe (a pair of pipes, one for `stdin` and
one for `stdout`), `smd-pull` simply performs the following

    smd-client === tee log === ssh $SERVERNAME smd-server $CLIENTNAME $MAILBOX

The `tee` command is used only for logging, and if $DEBUG is `false` it is replaced 
by `cat`. Viceversa `smd-push` performs what follows

    smd-server $CLIENTNAME $MAILBOX === tee log === ssh $SERVERNAME smd-client

They are both implemented in `bash`, since their main activity is to redirect standard
file descriptors and call other tools, check their exit status and eventually notify
the user with an extract of their logs.

SERVER/CLIENT interaction
=========================

A server software (`smd-server`) and a client software (`smd-client`) are respectively
used to transmit the diff generated by `mddiff` and eventually mails header or body,
and to apply a diff eventually requesting necessary data to the other endpoint.

Since they mostly implement policies, like deciding if a diff can be applied or not,
are implemented in an high level scripting language called [Lua](http://www.lua.org).
The language choice is almost arbitrary, there are no strong reasons for adopting Lua
instead of python or others, but its installation is pretty small and it executes
quite fast. Moreover, its syntax is particularly simple, making it understandable to
non Lua experts too. Finally, I find it elegant.

They send and receive data on their standard input and output channels, delegating
to external tools the transmission of data across a network, and optimizations like
compressing the data, or encrypting it. [OpenSSH](http://www.openssh.com/) can do both, 
and is adopted by `smd-pull` and `smd-push` to connect `smd-client` to `smd-server`.

A simple protocol defines how `smd-client` requests data to `smd-server` and how
`smd-client` notifies `smd-server` that all changes have been applied correctly.

...to be finished for version 1.0

smd-server
----------

...to be finished for version 1.0

smd-client
----------

...to be finished for version 1.0

MAILDIR DIFF
============

Maildir diff (`mddiff`) computes the delta from an old status of a maildir
(previously recorded in the db file) and the current status, generating
a set of commands (a diff) that a third party software can apply to
synchronize a (remote) copy of the maildir.

How it works
------------

This software uses sha1 to compute snapshots of a maildir, and 
computes a set of actions a client should perform to sync with
the mailbox status. This software alone is unable to syncronize
two maildirs. It has to be supported but an higher level tool implementing
the application of actions and data transfer over the network if 
the twin maildir is remote.

To cache the expensive sha1 calculation, a cache file is used.
Every run the program generates a new status file (appending .new)
that must substitute the old one if generated actions are committed
to the other maildir. Cache files are specific to the twin maildir,
if you have more than one, you must use a different cache file for
each of them.

The commands
------------

...to be finished for version 1.0

